const plugin = require('tailwindcss/plugin');

/**
 * IMPORTANT:
 * These utilities will overrule base tailwind flex utilities like 'justify-center', but also the display property (hidden, block etc.)
 * This happens because the plugin classes are declared after the base utilities.
 * --> Needs to be fixed before usage.
 * --> FIXED; Row styles are added as components instead, which are declared before utilities.
 *
 * A Warpaint-like row based on the flex utilities generated by tailwindcss.
 * An example output style:
 * .row-center-start {
 *     display: flex;
 *     flex-wrap: wrap;
 *     justify-content: center;
 *     align-items: flex-start; }
 */
const WarpaintRow = plugin(({ addComponents }) => {
    const justifyContentValues = [
        { className: 'start', value: 'flex-start' },
        { className: 'center', value: 'center' },
        { className: 'end', value: 'flex-end' },
        { className: 'around', value: 'space-around' },
        { className: 'between', value: 'space-between' },
    ];
    const alignItemsValues = [
        { className: 'start', value: 'flex-start' },
        { className: 'center', value: 'center' },
        { className: 'end', value: 'flex-end' },
        { className: 'stretch', value: 'stretch' },
    ];

    const rowUtilities = {};

    justifyContentValues.forEach((justifyContent) => {
        alignItemsValues.forEach((alignItems) => {
            const className = `.row-${justifyContent.className}-${alignItems.className}`;
            const classProperties = {
                display: 'flex',
                'flex-wrap': 'wrap',
                'justify-content': justifyContent.value,
                'align-items': alignItems.value,
            };
            rowUtilities[className] = classProperties;
        });
    });

    addComponents(rowUtilities);
});

module.exports = WarpaintRow;

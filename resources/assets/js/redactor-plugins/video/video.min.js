Redactor.add('plugin', 'video', {
    translations: { en: { video: 'Video', 'video-html-code': 'Video Embed Code or Youtube/Vimeo Link' } },
    modals: {
        video:
            '<form action="">                     <div class="form-item">                         <label for="modal-video-input">## video-html-code ## <span class="req">*</span></label>                         <textarea id="modal-video-input" name="video" style="height: 160px;"></textarea>                     </div>                 </form>',
    },
    init(e) {
        (this.app = e),
        (this.lang = e.lang),
        (this.opts = e.opts),
        (this.toolbar = e.toolbar),
        (this.component = e.component),
        (this.insertion = e.insertion),
        (this.inspector = e.inspector);
    },
    onmodal: {
        video: {
            opened(e, i) {
                i.getField('video').focus();
            },
            insert(e, i) {
                const t = i.getData();
                this._insert(t);
            },
        },
    },
    oncontextbar(e, i) {
        const t = this.inspector.parse(e.target);
        if (t.isComponentType('video')) {
            const o = t.getComponent();
            const n = { remove: { title: this.lang.get('delete'), api: 'plugin.video.remove', args: o } };
            i.set(e, o, n, 'bottom');
        }
    },
    start() {
        const e = { title: this.lang.get('video'), api: 'plugin.video.open' };
        this.toolbar.addButtonAfter('image', 'video', e).setIcon('<i class="re-icon-video"></i>');
    },
    open() {
        const e = {
            title: this.lang.get('video'),
            width: '600px',
            name: 'video',
            handle: 'insert',
            commands: { insert: { title: this.lang.get('insert') }, cancel: { title: this.lang.get('cancel') } },
        };
        this.app.api('module.modal.build', e);
    },
    remove(e) {
        this.component.remove(e);
    },
    _insert(e) {
        if (
            (this.app.api('module.modal.close'),
            e.video.trim() !== '' && ((e.video = this._matchData(e.video)), this._isVideoIframe(e.video)))
        ) {
            const i = this.component.create('video', e.video);
            this.insertion.insertHtml(i);
        }
    },
    _isVideoIframe(e) {
        return e.match(/<iframe|<video/gi) !== null;
    },
    _matchData(e) {
        const i = '<iframe style="width: 500px; height: 281px;" src="';
        const t = '" frameborder="0" allowfullscreen></iframe>';
        if (this._isVideoIframe(e)) {
            const o = ['iframe', 'video', 'source'];
            e = e.replace(/<\/?([a-z][a-z0-9]*)\b[^>]*>/gi, (e, i) => (o.indexOf(i.toLowerCase()) === -1 ? '' : e));
        }
        return (
            e.match(this.opts.regex.youtube)
                ? (e = e.replace(this.opts.regex.youtube, `${i}//www.youtube.com/embed/$1${t}`))
                : e.match(this.opts.regex.vimeo) &&
                  (e = e.replace(this.opts.regex.vimeo, `${i}//player.vimeo.com/video/$2${t}`)),
            e
        );
    },
}),
(function (e) {
    e.add('class', 'video.component', {
        mixins: ['dom', 'component'],
        init(e, i) {
            return (this.app = e), i && void 0 !== i.cmnt ? i : this._init(i);
        },
        _init(i) {
            if (void 0 !== i) {
                const t = e.dom(i).closest('figure');
                t.length !== 0 ? this.parse(t) : (this.parse('<figure>'), this.append(i));
            } else this.parse('<figure>');
            this._initWrapper();
        },
        _initWrapper() {
            this.addClass('redactor-component'),
            this.attr({ 'data-redactor-type': 'video', tabindex: '-1', contenteditable: !1 });
        },
    });
})(Redactor);

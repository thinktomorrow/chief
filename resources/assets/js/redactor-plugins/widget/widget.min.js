Redactor.add('plugin', 'widget', {
    translations: { en: { widget: 'Widget', 'widget-html-code': 'Widget HTML Code' } },
    modals: {
        widget:
            '<form action="">                     <div class="form-item">                         <label for="modal-widget-input">## widget-html-code ## <span class="req">*</span></label>                         <textarea id="modal-widget-input" name="widget" style="height: 200px;"></textarea>                     </div>                 </form>',
    },
    init(t) {
        (this.app = t),
            (this.lang = t.lang),
            (this.opts = t.opts),
            (this.toolbar = t.toolbar),
            (this.component = t.component),
            (this.insertion = t.insertion),
            (this.inspector = t.inspector),
            (this.selection = t.selection);
    },
    onmodal: {
        widget: {
            opened(t, e) {
                if ((e.getField('widget').focus(), this.$currentItem)) {
                    const i = decodeURI(this.$currentItem.attr('data-widget-code'));
                    e.getField('widget').val(i);
                }
            },
            insert(t, e) {
                const i = e.getData();
                this._insert(i);
            },
        },
    },
    oncontextbar(t, e) {
        const i = this.inspector.parse(t.target);
        if (!i.isFigcaption() && i.isComponentType('widget')) {
            const n = i.getComponent();
            const o = {
                edit: { title: this.lang.get('edit'), api: 'plugin.widget.open', args: n },
                remove: { title: this.lang.get('delete'), api: 'plugin.widget.remove', args: n },
            };
            e.set(t, n, o, 'bottom');
        }
    },
    onbutton: {
        widget: {
            observe(t) {
                this._observeButton(t);
            },
        },
    },
    start() {
        const t = { title: this.lang.get('widget'), api: 'plugin.widget.open', observe: 'widget' };
        this.toolbar.addButton('widget', t).setIcon('<i class="re-icon-widget"></i>');
    },
    open() {
        this.$currentItem = this._getCurrent();
        const t = {
            title: this.lang.get('widget'),
            width: '600px',
            name: 'widget',
            handle: 'insert',
            commands: {
                insert: { title: this.$currentItem ? this.lang.get('save') : this.lang.get('insert') },
                cancel: { title: this.lang.get('cancel') },
            },
        };
        this.app.api('module.modal.build', t);
    },
    remove(t) {
        this.component.remove(t);
    },
    _getCurrent() {
        const t = this.selection.getCurrent();
        const e = this.inspector.parse(t);
        if (e.isComponentType('widget')) return this.component.build(e.getComponent());
    },
    _insert(t) {
        if ((this.app.api('module.modal.close'), t.widget.trim() !== '')) {
            const e = this._isHtmlString(t.widget) ? t.widget : document.createTextNode(t.widget);
            const i = this.component.create('widget', e);
            i.attr('data-widget-code', encodeURI(t.widget.trim())), this.insertion.insertHtml(i);
        }
    },
    _isHtmlString(t) {
        return !(typeof t === 'string' && !/^\s*<(\w+|!)[^>]*>/.test(t));
    },
    _observeButton(t) {
        const e = this.selection.getCurrent();
        this.inspector.parse(e).isComponentType('table') ? t.disable() : t.enable();
    },
}),
    (function (t) {
        t.add('class', 'widget.component', {
            mixins: ['dom', 'component'],
            init(t, e) {
                return (this.app = t), e && void 0 !== e.cmnt ? e : this._init(e);
            },
            getData() {
                return { html: this._getHtml() };
            },
            _init(e) {
                if (void 0 !== e) {
                    const i = t.dom(e).closest('figure');
                    i.length !== 0 ? this.parse(i) : (this.parse('<figure>'), this.html(e));
                } else this.parse('<figure>');
                this._initWrapper();
            },
            _getHtml() {
                const e = t.dom('<div>');
                return e.html(this.html()), e.find('.redactor-component-caret').remove(), e.html();
            },
            _initWrapper() {
                this.addClass('redactor-component'),
                    this.attr({ 'data-redactor-type': 'widget', tabindex: '-1', contenteditable: !1 });
            },
        });
    })(Redactor);
